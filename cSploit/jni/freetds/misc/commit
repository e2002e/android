#!/usr/bin/perl

# $Id: commit,v 1.8 2011-05-16 13:31:11 freddy77 Exp $

use strict;

my $debug = 0;
my $lineLimit = 75; # maximun row length

# parse arguments
my $cvsMessage = '';
foreach my $arg (@ARGV) {
	$debug = 1, next if $arg eq '--debug';
	die("wrong argument $cvsMessage\n") if $cvsMessage ne '';
	$cvsMessage = $arg;
}
die("cvs commit message required\n") if $cvsMessage eq '';

`freetds_local`;
die('setting local') if $?;

# extract file changed
open(CHANGES, 'cvs diff -N 2> /dev/null | lsdiff |') or die('getting files changed');
my %changes;
while(<CHANGES>) {
	chomp;
	print "detected file changed $_\n" if $debug;
	$changes{$_} = 0;
}
close(CHANGES);

my @lastFiles; # all files collected
my @lastComments = (); # all comments collected
my @changeLog; # list of files with proper comments

sub addChangeLog()
{
	@lastComments = grep { $_ ne '' } map { s/\s+/ /sg; s/^ //; s/ $//; $_ } @lastComments;
	return if $#lastComments < 0;
	die('comment with no files') if $#lastFiles < 0;
	push @changeLog, { files => [@lastFiles], comments => [@lastComments] };
	@lastComments = ();
	@lastFiles = ();
}

sub dumpChangeLog()
{
	print "dumping changeLog\n";
	foreach my $ch (@changeLog) {
		print "\tfiles: ".join(' ',@{$ch->{files}})."
\tcomments: - ".join("\n\t\t- ", @{$ch->{comments}})."
";
	}
}
sub parseLine($)
{
	my ($line) = @_;
	my $comment = '';
	chomp $line;
	print "lastFiles @lastFiles\n" if $debug;
	print "parsing line $line\n" if $debug;

	# anything after : or - is a comment
	if ($line =~ /(.*?)(:|- )(.*)/) {
		($line, $comment) = ($1, $3);
		push(@lastComments, '') if $2 eq '- ';
		print "line $line comment $comment\n" if $debug;
	}

	# if start with * a file follows
	my $needFile = 0;
	if ($line =~ /^\s*\*\s*(.*)/) {
		$needFile = 1;
		$line = $1;
	}

	print "parsing line $line\n" if $debug;

	my $fileFound = 0;
	foreach my $tok (split(/\s+/, $line)) {
		next if $tok eq '';
		print "token $tok\n" if $debug;
		if (defined($changes{$tok})) {
			# add comment to files
			addChangeLog();
			$fileFound = 1;
			die ("found two $tok references") if ++$changes{$tok} > 1;
			push @lastFiles, $tok;
			print "file $tok detected\n" if $debug;
			$line =~ s/.*?$tok\s*//;
			print "line left $line\n" if $debug;
		} else {
			last
		}
	}
	die('wrong format line, file expected') if $needFile && !$fileFound;

	$line =~ s/^\s+//s;
	$comment =~ s/^\s+//s;
	die ('two comments in a line') if $line ne '' && $comment ne '';
	push(@lastComments, '') if $#lastComments < 0;
	$lastComments[-1] .= " $line $comment";
}

# extract first ChangeLog rows
open(CL, '<', 'ChangeLog') or die ('opening ChangeLog');
my $nRow = 1;
my $begin = '';
while (<CL>) {
	my $hdr = 0;
	if ($nRow == 1) {
		my $norm = $_;
		$norm =~ s/\s+/ /g;
		$hdr = ($norm =~ /Frediano Ziglio/i);
	}
	if (!$hdr) {
		last if $nRow != 1 && $_ ne "\n" && !/^[ \t]/;
		&parseLine($_);
		$begin .= $_;
	}
	++$nRow;
	die('too many start rows') if $nRow >= 120;
}
addChangeLog();
die('files with no comments') if $#lastFiles >= 0;
dumpChangeLog if $debug;
close(CL);
--$nRow;
print "readed $nRow lines\n" if $debug;
print "begin with: \n--- START ---\n$begin--- END ---\n" if $debug;

sub splitLines($$$$$)
{
	my ($line, $start1, $start2, $end, $limit) = @_;
	my $res = '';
	my $start = $start1;
	while (length($line) > $limit) {
		die("unable to split line:\n'$line'") if ($line !~ /^(.{1,$limit}) (.*)$/);
		$res .= "$start$1$end\n";
		$start = $start2;
		$line = $2;
	}
	$res .= "$start$line$end\n";
	return $res;
}

# compute ChangeLog lines and list of all files
my $date = `LANG=C date`;
chomp $date;
my $norm = "$date    Frediano Ziglio <freddy77_A_gmail_D_com>\n";
my @allFiles = ('ChangeLog');
foreach my $ch (@changeLog) {
	push @allFiles, @{$ch->{files}};
	my $files = join(' ', @{$ch->{files}});
	my $oneLine = "* $files: @{$ch->{comments}}";
	if (scalar @{$ch->{comments}} == 1 && length($oneLine) + 8 <= $lineLimit) {
		$norm .= "\t$oneLine\n"
	} else {
		$norm .= splitLines($files, "\t* ", "\t* ", ':', $lineLimit - 11);
		$norm .= join('', map { splitLines($_, "\t- ", "\t  ", '', $lineLimit - 10) } @{$ch->{comments}});
	}
}
print "Normalized ChangeLog:\n$norm";
print "Changed file list:\n".splitLines(join(' ',@allFiles), "\t", "\t", '', $lineLimit - 8);
print "Message:\n\t$cvsMessage\n";

# request confirm
for (;;) {
	print "Agree (yes|no)\n";
	$! = '';
	my $answer = <STDIN>;
	die("error reading reply: $!") if !defined($answer);
	chomp $answer;
	last if $answer eq 'yes';
	exit(2) if $answer eq 'no';
}

# change ChangeLog if needed
open(CL, '<', 'ChangeLog') or die ('opening ChangeLog');
open(CL2, '>', '.ChangeLog.tmp') or die ('opening ChangeLog');
print CL2 "$norm\n";
for my $i (1..$nRow) {
	<CL>;
}
while (<CL>) {
	print CL2 $_;
}
close(CL2);
close(CL);
rename('.ChangeLog.tmp', 'ChangeLog') or die('error renaming temp ChangeLog file');

# commit 
`freetds_remote`;
die('setting local') if $?;
$| = 1;
if (!fork()) {
	my @args = ('cvs', 'commit', '-m', $cvsMessage, @allFiles);
	print "Command:\n\t".join(' ', @args)."\n" if $debug;
	exec @args if !$debug;
	exit(1);
}
wait();
my $cvsOut = $?;

`freetds_local`;
die('setting local') if $?;

die('cvs command failed') if $cvsOut;

print "Everything went all right\n";

